#!/usr/bin/env python3

import argparse
import anndata as ad
import pandas as pd
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
import seaborn as sns
import scanpy as sc


def main(args):
    #########################
    ## MERGE ADATA OBJECTS ##
    #########################
    adatas = {}
    for file_path in args.adata_paths_input:
        adata = sc.read_h5ad(file_path)
        sample_id = adata.obs["sample"].unique()
        adatas[sample_id[0]] = adata

    merged_adata = ad.concat(adatas, index_unique="_", merge="same", uns_merge="first")

    if not "spatial" in merged_adata.uns:
        raise ValueError(f"adata.uns lost spatial information during merge. Exiting.")

    ##########
    ## PLOT ##
    ##########
    # QC violin plots
    sc.pl.violin(
        merged_adata,
        [
            "n_genes_by_counts",
            "total_counts",
            "pct_counts_mt",
            "pct_counts_rb",
        ],
        jitter=0.4,
        multi_panel=True,
    )
    fig = plt.gcf()
    fig.suptitle(f"QC violin plot - {args.qc_plots_prefix}", va="center", ha="center", fontsize=16)
    plt.savefig(f"{args.qc_plots_prefix}.qc_violin.png", dpi=300, bbox_inches="tight")

    # Total counts and n genes by counts distribution plots
    fig, axs = plt.subplots(1, 4, figsize=(15,4))
    fig.suptitle(f"Covariates for filtering - {args.qc_plots_prefix}")
    sns.distplot(
        merged_adata.obs["total_counts"],
        kde=False,
        ax=axs[0],
    )
    sns.distplot(
        merged_adata.obs["total_counts"][merged_adata.obs["total_counts"]<10000],
        kde=False,
        bins=40,
        ax=axs[1],
    )
    sns.distplot(
        merged_adata.obs["n_genes_by_counts"],
        kde=False,
        bins=60,
        ax=axs[2],
    )
    sns.distplot(
        merged_adata.obs["n_genes_by_counts"][merged_adata.obs["n_genes_by_counts"]<4000],
        kde=False,
        bins=60,
        ax=axs[3],
    )

    plt.savefig(f"{args.qc_plots_prefix}.qc_dist.png", dpi=300, bbox_inches="tight")

    # Save outputs
    merged_adata.write_h5ad(filename=args.merged_adata_output, compression="gzip")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Merge adata objects and plot quality control metrics"
    )
    parser.add_argument(
        "-i",
        "--adata-paths-input",
        nargs="+",
        required=True,
        help="List of preprocessed adata objects to merge"
    )
    parser.add_argument(
        "-p",
        "--qc-plots-prefix",
        type=str,
        required=True,
        help="Output file name prefix for the QC violin and distribution plots"
    )
    parser.add_argument(
        "-o",
        "--merged-adata-output",
        type=str,
        required=True,
        help="Output file name for the merged AnnData object"
    )

    args = parser.parse_args()

    main(args)
